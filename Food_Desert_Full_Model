{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Clara-Lee2021/PortfolioProjects/blob/main/Food_Desert_Full_Model\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Prepare Data"
      ],
      "metadata": {
        "id": "MTV9lk11vP-r"
      },
      "id": "MTV9lk11vP-r"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "e04210d4",
      "metadata": {
        "id": "e04210d4"
      },
      "outputs": [],
      "source": [
        "# import library\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "6cc65b0d",
      "metadata": {
        "id": "6cc65b0d",
        "outputId": "233e386b-2f2e-464d-9b7a-33838fab5382"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>EastofUS</th>\n",
              "      <th>Urban</th>\n",
              "      <th>LowIncomeTracts</th>\n",
              "      <th>PCTGQTRS</th>\n",
              "      <th>PovertyRate</th>\n",
              "      <th>MedianFamilyIncome</th>\n",
              "      <th>TractKids</th>\n",
              "      <th>TractSeniors</th>\n",
              "      <th>TractWhite</th>\n",
              "      <th>TractBlack</th>\n",
              "      <th>...</th>\n",
              "      <th>log10_TractSeniors</th>\n",
              "      <th>log10_TractWhite</th>\n",
              "      <th>log10_TractBlack</th>\n",
              "      <th>log10_TractAsian</th>\n",
              "      <th>log10_TractNHOPI</th>\n",
              "      <th>log10_TractAIAN</th>\n",
              "      <th>log10_TractOMultir</th>\n",
              "      <th>log10_TractHispanic</th>\n",
              "      <th>log10_TractHUNV</th>\n",
              "      <th>log10_TractSNAP</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>11.3</td>\n",
              "      <td>81250</td>\n",
              "      <td>507</td>\n",
              "      <td>221</td>\n",
              "      <td>1622</td>\n",
              "      <td>217</td>\n",
              "      <td>...</td>\n",
              "      <td>2.346353</td>\n",
              "      <td>3.210319</td>\n",
              "      <td>2.338456</td>\n",
              "      <td>1.176091</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.176091</td>\n",
              "      <td>1.662758</td>\n",
              "      <td>1.653213</td>\n",
              "      <td>0.845098</td>\n",
              "      <td>2.012837</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>8.34</td>\n",
              "      <td>17.9</td>\n",
              "      <td>49000</td>\n",
              "      <td>606</td>\n",
              "      <td>214</td>\n",
              "      <td>888</td>\n",
              "      <td>1217</td>\n",
              "      <td>...</td>\n",
              "      <td>2.332438</td>\n",
              "      <td>2.948902</td>\n",
              "      <td>3.085647</td>\n",
              "      <td>0.778151</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.778151</td>\n",
              "      <td>1.748188</td>\n",
              "      <td>1.880814</td>\n",
              "      <td>1.954243</td>\n",
              "      <td>2.195900</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>15.0</td>\n",
              "      <td>62609</td>\n",
              "      <td>894</td>\n",
              "      <td>439</td>\n",
              "      <td>2576</td>\n",
              "      <td>647</td>\n",
              "      <td>...</td>\n",
              "      <td>2.643453</td>\n",
              "      <td>3.411114</td>\n",
              "      <td>2.811575</td>\n",
              "      <td>1.255273</td>\n",
              "      <td>0.778151</td>\n",
              "      <td>1.079181</td>\n",
              "      <td>2.071882</td>\n",
              "      <td>1.944483</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>2.238046</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>2.8</td>\n",
              "      <td>70607</td>\n",
              "      <td>1015</td>\n",
              "      <td>904</td>\n",
              "      <td>4086</td>\n",
              "      <td>193</td>\n",
              "      <td>...</td>\n",
              "      <td>2.956649</td>\n",
              "      <td>3.611405</td>\n",
              "      <td>2.287802</td>\n",
              "      <td>1.278754</td>\n",
              "      <td>0.698970</td>\n",
              "      <td>1.079181</td>\n",
              "      <td>1.875061</td>\n",
              "      <td>1.934498</td>\n",
              "      <td>1.342423</td>\n",
              "      <td>1.995635</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1.68</td>\n",
              "      <td>15.2</td>\n",
              "      <td>96334</td>\n",
              "      <td>3162</td>\n",
              "      <td>1126</td>\n",
              "      <td>8666</td>\n",
              "      <td>1437</td>\n",
              "      <td>...</td>\n",
              "      <td>3.051924</td>\n",
              "      <td>3.937869</td>\n",
              "      <td>3.157759</td>\n",
              "      <td>2.472756</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.690196</td>\n",
              "      <td>2.492760</td>\n",
              "      <td>2.551450</td>\n",
              "      <td>2.363612</td>\n",
              "      <td>2.531479</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>71756</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1.71</td>\n",
              "      <td>9.7</td>\n",
              "      <td>67254</td>\n",
              "      <td>884</td>\n",
              "      <td>593</td>\n",
              "      <td>3106</td>\n",
              "      <td>6</td>\n",
              "      <td>...</td>\n",
              "      <td>2.773786</td>\n",
              "      <td>3.492341</td>\n",
              "      <td>0.845098</td>\n",
              "      <td>1.204120</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.447158</td>\n",
              "      <td>2.238046</td>\n",
              "      <td>2.491362</td>\n",
              "      <td>1.792392</td>\n",
              "      <td>1.812913</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>71757</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0.38</td>\n",
              "      <td>11.6</td>\n",
              "      <td>64152</td>\n",
              "      <td>674</td>\n",
              "      <td>399</td>\n",
              "      <td>2377</td>\n",
              "      <td>5</td>\n",
              "      <td>...</td>\n",
              "      <td>2.602060</td>\n",
              "      <td>3.376212</td>\n",
              "      <td>0.778151</td>\n",
              "      <td>1.380211</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.612784</td>\n",
              "      <td>2.344392</td>\n",
              "      <td>2.650308</td>\n",
              "      <td>1.949390</td>\n",
              "      <td>1.623249</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>71758</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>2.87</td>\n",
              "      <td>16.3</td>\n",
              "      <td>69605</td>\n",
              "      <td>614</td>\n",
              "      <td>516</td>\n",
              "      <td>2312</td>\n",
              "      <td>11</td>\n",
              "      <td>...</td>\n",
              "      <td>2.713491</td>\n",
              "      <td>3.364176</td>\n",
              "      <td>1.079181</td>\n",
              "      <td>1.041393</td>\n",
              "      <td>0.301030</td>\n",
              "      <td>1.431364</td>\n",
              "      <td>2.262451</td>\n",
              "      <td>2.610660</td>\n",
              "      <td>1.380211</td>\n",
              "      <td>1.812913</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>71759</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>7.60</td>\n",
              "      <td>17.5</td>\n",
              "      <td>74500</td>\n",
              "      <td>655</td>\n",
              "      <td>499</td>\n",
              "      <td>3179</td>\n",
              "      <td>15</td>\n",
              "      <td>...</td>\n",
              "      <td>2.698970</td>\n",
              "      <td>3.502427</td>\n",
              "      <td>1.204120</td>\n",
              "      <td>1.041393</td>\n",
              "      <td>0.301030</td>\n",
              "      <td>1.681241</td>\n",
              "      <td>1.799341</td>\n",
              "      <td>1.963788</td>\n",
              "      <td>1.681241</td>\n",
              "      <td>1.544068</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>71760</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1.57</td>\n",
              "      <td>17.3</td>\n",
              "      <td>76838</td>\n",
              "      <td>918</td>\n",
              "      <td>650</td>\n",
              "      <td>3706</td>\n",
              "      <td>6</td>\n",
              "      <td>...</td>\n",
              "      <td>2.813581</td>\n",
              "      <td>3.569023</td>\n",
              "      <td>0.845098</td>\n",
              "      <td>1.041393</td>\n",
              "      <td>0.477121</td>\n",
              "      <td>1.653213</td>\n",
              "      <td>2.103804</td>\n",
              "      <td>2.100371</td>\n",
              "      <td>1.544068</td>\n",
              "      <td>2.045323</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>71761 rows × 32 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "       EastofUS  Urban  LowIncomeTracts  PCTGQTRS  PovertyRate  \\\n",
              "0             1      1                0      0.00         11.3   \n",
              "1             1      1                1      8.34         17.9   \n",
              "2             1      1                0      0.00         15.0   \n",
              "3             1      1                0      0.00          2.8   \n",
              "4             1      1                0      1.68         15.2   \n",
              "...         ...    ...              ...       ...          ...   \n",
              "71756         0      0                0      1.71          9.7   \n",
              "71757         0      1                0      0.38         11.6   \n",
              "71758         0      1                0      2.87         16.3   \n",
              "71759         0      0                0      7.60         17.5   \n",
              "71760         0      1                0      1.57         17.3   \n",
              "\n",
              "       MedianFamilyIncome  TractKids  TractSeniors  TractWhite  TractBlack  \\\n",
              "0                   81250        507           221        1622         217   \n",
              "1                   49000        606           214         888        1217   \n",
              "2                   62609        894           439        2576         647   \n",
              "3                   70607       1015           904        4086         193   \n",
              "4                   96334       3162          1126        8666        1437   \n",
              "...                   ...        ...           ...         ...         ...   \n",
              "71756               67254        884           593        3106           6   \n",
              "71757               64152        674           399        2377           5   \n",
              "71758               69605        614           516        2312          11   \n",
              "71759               74500        655           499        3179          15   \n",
              "71760               76838        918           650        3706           6   \n",
              "\n",
              "       ...  log10_TractSeniors  log10_TractWhite  log10_TractBlack  \\\n",
              "0      ...            2.346353          3.210319          2.338456   \n",
              "1      ...            2.332438          2.948902          3.085647   \n",
              "2      ...            2.643453          3.411114          2.811575   \n",
              "3      ...            2.956649          3.611405          2.287802   \n",
              "4      ...            3.051924          3.937869          3.157759   \n",
              "...    ...                 ...               ...               ...   \n",
              "71756  ...            2.773786          3.492341          0.845098   \n",
              "71757  ...            2.602060          3.376212          0.778151   \n",
              "71758  ...            2.713491          3.364176          1.079181   \n",
              "71759  ...            2.698970          3.502427          1.204120   \n",
              "71760  ...            2.813581          3.569023          0.845098   \n",
              "\n",
              "       log10_TractAsian  log10_TractNHOPI  log10_TractAIAN  \\\n",
              "0              1.176091          0.000000         1.176091   \n",
              "1              0.778151          0.000000         0.778151   \n",
              "2              1.255273          0.778151         1.079181   \n",
              "3              1.278754          0.698970         1.079181   \n",
              "4              2.472756          1.000000         1.690196   \n",
              "...                 ...               ...              ...   \n",
              "71756          1.204120          0.000000         1.447158   \n",
              "71757          1.380211          0.000000         1.612784   \n",
              "71758          1.041393          0.301030         1.431364   \n",
              "71759          1.041393          0.301030         1.681241   \n",
              "71760          1.041393          0.477121         1.653213   \n",
              "\n",
              "       log10_TractOMultir  log10_TractHispanic  log10_TractHUNV  \\\n",
              "0                1.662758             1.653213         0.845098   \n",
              "1                1.748188             1.880814         1.954243   \n",
              "2                2.071882             1.944483         2.000000   \n",
              "3                1.875061             1.934498         1.342423   \n",
              "4                2.492760             2.551450         2.363612   \n",
              "...                   ...                  ...              ...   \n",
              "71756            2.238046             2.491362         1.792392   \n",
              "71757            2.344392             2.650308         1.949390   \n",
              "71758            2.262451             2.610660         1.380211   \n",
              "71759            1.799341             1.963788         1.681241   \n",
              "71760            2.103804             2.100371         1.544068   \n",
              "\n",
              "       log10_TractSNAP  \n",
              "0             2.012837  \n",
              "1             2.195900  \n",
              "2             2.238046  \n",
              "3             1.995635  \n",
              "4             2.531479  \n",
              "...                ...  \n",
              "71756         1.812913  \n",
              "71757         1.623249  \n",
              "71758         1.812913  \n",
              "71759         1.544068  \n",
              "71760         2.045323  \n",
              "\n",
              "[71761 rows x 32 columns]"
            ]
          },
          "execution_count": 2,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# load cleaned data\n",
        "fd = pd.read_excel(\"https://github.com/20JUNE22/capstone2023/raw/main/clean_data.xlsx\")\n",
        "\n",
        "fd"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "3ee3aa4c",
      "metadata": {
        "id": "3ee3aa4c",
        "outputId": "235de08f-95bc-4387-cc76-b8294d7e637d"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>EastofUS</th>\n",
              "      <th>Urban</th>\n",
              "      <th>LowIncomeTracts</th>\n",
              "      <th>FoodDesert</th>\n",
              "      <th>log10_PCTGQTRS</th>\n",
              "      <th>log10_PovertyRate</th>\n",
              "      <th>log10_MedianFamilyIncome</th>\n",
              "      <th>log10_TractKids</th>\n",
              "      <th>log10_TractSeniors</th>\n",
              "      <th>log10_TractWhite</th>\n",
              "      <th>log10_TractBlack</th>\n",
              "      <th>log10_TractAsian</th>\n",
              "      <th>log10_TractNHOPI</th>\n",
              "      <th>log10_TractAIAN</th>\n",
              "      <th>log10_TractOMultir</th>\n",
              "      <th>log10_TractHispanic</th>\n",
              "      <th>log10_TractHUNV</th>\n",
              "      <th>log10_TractSNAP</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.089905</td>\n",
              "      <td>4.896262</td>\n",
              "      <td>2.705864</td>\n",
              "      <td>2.346353</td>\n",
              "      <td>3.210319</td>\n",
              "      <td>2.338456</td>\n",
              "      <td>1.176091</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.176091</td>\n",
              "      <td>1.662758</td>\n",
              "      <td>1.653213</td>\n",
              "      <td>0.845098</td>\n",
              "      <td>2.012837</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0.970347</td>\n",
              "      <td>1.276462</td>\n",
              "      <td>4.667472</td>\n",
              "      <td>2.783189</td>\n",
              "      <td>2.332438</td>\n",
              "      <td>2.948902</td>\n",
              "      <td>3.085647</td>\n",
              "      <td>0.778151</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.778151</td>\n",
              "      <td>1.748188</td>\n",
              "      <td>1.880814</td>\n",
              "      <td>1.954243</td>\n",
              "      <td>2.195900</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.204120</td>\n",
              "      <td>4.778954</td>\n",
              "      <td>2.951823</td>\n",
              "      <td>2.643453</td>\n",
              "      <td>3.411114</td>\n",
              "      <td>2.811575</td>\n",
              "      <td>1.255273</td>\n",
              "      <td>0.778151</td>\n",
              "      <td>1.079181</td>\n",
              "      <td>2.071882</td>\n",
              "      <td>1.944483</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>2.238046</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.579784</td>\n",
              "      <td>4.833205</td>\n",
              "      <td>3.006894</td>\n",
              "      <td>2.956649</td>\n",
              "      <td>3.611405</td>\n",
              "      <td>2.287802</td>\n",
              "      <td>1.278754</td>\n",
              "      <td>0.698970</td>\n",
              "      <td>1.079181</td>\n",
              "      <td>1.875061</td>\n",
              "      <td>1.934498</td>\n",
              "      <td>1.342423</td>\n",
              "      <td>1.995635</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0.428135</td>\n",
              "      <td>1.209515</td>\n",
              "      <td>4.972369</td>\n",
              "      <td>3.500099</td>\n",
              "      <td>3.051924</td>\n",
              "      <td>3.937869</td>\n",
              "      <td>3.157759</td>\n",
              "      <td>2.472756</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.690196</td>\n",
              "      <td>2.492760</td>\n",
              "      <td>2.551450</td>\n",
              "      <td>2.363612</td>\n",
              "      <td>2.531479</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   EastofUS  Urban  LowIncomeTracts  FoodDesert  log10_PCTGQTRS  \\\n",
              "0         1      1                0           1        0.000000   \n",
              "1         1      1                1           1        0.970347   \n",
              "2         1      1                0           1        0.000000   \n",
              "3         1      1                0           1        0.000000   \n",
              "4         1      1                0           1        0.428135   \n",
              "\n",
              "   log10_PovertyRate  log10_MedianFamilyIncome  log10_TractKids  \\\n",
              "0           1.089905                  4.896262         2.705864   \n",
              "1           1.276462                  4.667472         2.783189   \n",
              "2           1.204120                  4.778954         2.951823   \n",
              "3           0.579784                  4.833205         3.006894   \n",
              "4           1.209515                  4.972369         3.500099   \n",
              "\n",
              "   log10_TractSeniors  log10_TractWhite  log10_TractBlack  log10_TractAsian  \\\n",
              "0            2.346353          3.210319          2.338456          1.176091   \n",
              "1            2.332438          2.948902          3.085647          0.778151   \n",
              "2            2.643453          3.411114          2.811575          1.255273   \n",
              "3            2.956649          3.611405          2.287802          1.278754   \n",
              "4            3.051924          3.937869          3.157759          2.472756   \n",
              "\n",
              "   log10_TractNHOPI  log10_TractAIAN  log10_TractOMultir  log10_TractHispanic  \\\n",
              "0          0.000000         1.176091            1.662758             1.653213   \n",
              "1          0.000000         0.778151            1.748188             1.880814   \n",
              "2          0.778151         1.079181            2.071882             1.944483   \n",
              "3          0.698970         1.079181            1.875061             1.934498   \n",
              "4          1.000000         1.690196            2.492760             2.551450   \n",
              "\n",
              "   log10_TractHUNV  log10_TractSNAP  \n",
              "0         0.845098         2.012837  \n",
              "1         1.954243         2.195900  \n",
              "2         2.000000         2.238046  \n",
              "3         1.342423         1.995635  \n",
              "4         2.363612         2.531479  "
            ]
          },
          "execution_count": 4,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# drop the irrelevant inputs\n",
        "us = fd.drop(fd.columns[3:17], axis=1)\n",
        "\n",
        "us.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "67a1443a",
      "metadata": {
        "id": "67a1443a",
        "outputId": "6e622886-d8a0-46f2-906d-b7449baba14f"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>EastofUS</th>\n",
              "      <th>Urban</th>\n",
              "      <th>LowIncomeTracts</th>\n",
              "      <th>log10_PCTGQTRS</th>\n",
              "      <th>log10_PovertyRate</th>\n",
              "      <th>log10_MedianFamilyIncome</th>\n",
              "      <th>log10_TractKids</th>\n",
              "      <th>log10_TractSeniors</th>\n",
              "      <th>log10_TractWhite</th>\n",
              "      <th>log10_TractBlack</th>\n",
              "      <th>log10_TractAsian</th>\n",
              "      <th>log10_TractNHOPI</th>\n",
              "      <th>log10_TractAIAN</th>\n",
              "      <th>log10_TractOMultir</th>\n",
              "      <th>log10_TractHispanic</th>\n",
              "      <th>log10_TractHUNV</th>\n",
              "      <th>log10_TractSNAP</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.089905</td>\n",
              "      <td>4.896262</td>\n",
              "      <td>2.705864</td>\n",
              "      <td>2.346353</td>\n",
              "      <td>3.210319</td>\n",
              "      <td>2.338456</td>\n",
              "      <td>1.176091</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.176091</td>\n",
              "      <td>1.662758</td>\n",
              "      <td>1.653213</td>\n",
              "      <td>0.845098</td>\n",
              "      <td>2.012837</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0.970347</td>\n",
              "      <td>1.276462</td>\n",
              "      <td>4.667472</td>\n",
              "      <td>2.783189</td>\n",
              "      <td>2.332438</td>\n",
              "      <td>2.948902</td>\n",
              "      <td>3.085647</td>\n",
              "      <td>0.778151</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.778151</td>\n",
              "      <td>1.748188</td>\n",
              "      <td>1.880814</td>\n",
              "      <td>1.954243</td>\n",
              "      <td>2.195900</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.204120</td>\n",
              "      <td>4.778954</td>\n",
              "      <td>2.951823</td>\n",
              "      <td>2.643453</td>\n",
              "      <td>3.411114</td>\n",
              "      <td>2.811575</td>\n",
              "      <td>1.255273</td>\n",
              "      <td>0.778151</td>\n",
              "      <td>1.079181</td>\n",
              "      <td>2.071882</td>\n",
              "      <td>1.944483</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>2.238046</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.579784</td>\n",
              "      <td>4.833205</td>\n",
              "      <td>3.006894</td>\n",
              "      <td>2.956649</td>\n",
              "      <td>3.611405</td>\n",
              "      <td>2.287802</td>\n",
              "      <td>1.278754</td>\n",
              "      <td>0.698970</td>\n",
              "      <td>1.079181</td>\n",
              "      <td>1.875061</td>\n",
              "      <td>1.934498</td>\n",
              "      <td>1.342423</td>\n",
              "      <td>1.995635</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0.428135</td>\n",
              "      <td>1.209515</td>\n",
              "      <td>4.972369</td>\n",
              "      <td>3.500099</td>\n",
              "      <td>3.051924</td>\n",
              "      <td>3.937869</td>\n",
              "      <td>3.157759</td>\n",
              "      <td>2.472756</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.690196</td>\n",
              "      <td>2.492760</td>\n",
              "      <td>2.551450</td>\n",
              "      <td>2.363612</td>\n",
              "      <td>2.531479</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   EastofUS  Urban  LowIncomeTracts  log10_PCTGQTRS  log10_PovertyRate  \\\n",
              "0         1      1                0        0.000000           1.089905   \n",
              "1         1      1                1        0.970347           1.276462   \n",
              "2         1      1                0        0.000000           1.204120   \n",
              "3         1      1                0        0.000000           0.579784   \n",
              "4         1      1                0        0.428135           1.209515   \n",
              "\n",
              "   log10_MedianFamilyIncome  log10_TractKids  log10_TractSeniors  \\\n",
              "0                  4.896262         2.705864            2.346353   \n",
              "1                  4.667472         2.783189            2.332438   \n",
              "2                  4.778954         2.951823            2.643453   \n",
              "3                  4.833205         3.006894            2.956649   \n",
              "4                  4.972369         3.500099            3.051924   \n",
              "\n",
              "   log10_TractWhite  log10_TractBlack  log10_TractAsian  log10_TractNHOPI  \\\n",
              "0          3.210319          2.338456          1.176091          0.000000   \n",
              "1          2.948902          3.085647          0.778151          0.000000   \n",
              "2          3.411114          2.811575          1.255273          0.778151   \n",
              "3          3.611405          2.287802          1.278754          0.698970   \n",
              "4          3.937869          3.157759          2.472756          1.000000   \n",
              "\n",
              "   log10_TractAIAN  log10_TractOMultir  log10_TractHispanic  log10_TractHUNV  \\\n",
              "0         1.176091            1.662758             1.653213         0.845098   \n",
              "1         0.778151            1.748188             1.880814         1.954243   \n",
              "2         1.079181            2.071882             1.944483         2.000000   \n",
              "3         1.079181            1.875061             1.934498         1.342423   \n",
              "4         1.690196            2.492760             2.551450         2.363612   \n",
              "\n",
              "   log10_TractSNAP  \n",
              "0         2.012837  \n",
              "1         2.195900  \n",
              "2         2.238046  \n",
              "3         1.995635  \n",
              "4         2.531479  "
            ]
          },
          "execution_count": 5,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# divided 'US' data into the independent and dependent variables\n",
        "X = us.drop(['FoodDesert'], axis=1) # all independent\n",
        "y = us['FoodDesert'] # target\n",
        "\n",
        "X.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Model Selection"
      ],
      "metadata": {
        "id": "ERT0aqVWvegm"
      },
      "id": "ERT0aqVWvegm"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "cbc451f9",
      "metadata": {
        "id": "cbc451f9",
        "outputId": "c885ab26-61c6-4458-ccf4-405f5132bc2e"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Logistic Regression Results:\n",
            "Accuracy: 0.742\n",
            "Precision: 0.685\n",
            "Recall: 0.582\n",
            "F1 Score: 0.629\n",
            "\n",
            "Decision Tree Results:\n",
            "Accuracy: 0.678\n",
            "Precision: 0.569\n",
            "Recall: 0.589\n",
            "F1 Score: 0.579\n",
            "\n",
            "Random Forest Results:\n",
            "Accuracy: 0.763\n",
            "Precision: 0.716\n",
            "Recall: 0.615\n",
            "F1 Score: 0.662\n",
            "\n",
            "XGBoost Results:\n",
            "Accuracy: 0.757\n",
            "Precision: 0.694\n",
            "Recall: 0.631\n",
            "F1 Score: 0.661\n",
            "\n",
            "LightGBM Results:\n",
            "Accuracy: 0.763\n",
            "Precision: 0.707\n",
            "Recall: 0.630\n",
            "F1 Score: 0.666\n",
            "\n",
            "SVM Results:\n",
            "Accuracy: 0.757\n",
            "Precision: 0.697\n",
            "Recall: 0.624\n",
            "F1 Score: 0.659\n",
            "\n",
            "KNN Results:\n",
            "Accuracy: 0.723\n",
            "Precision: 0.641\n",
            "Recall: 0.601\n",
            "F1 Score: 0.620\n",
            "\n"
          ]
        }
      ],
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from xgboost import XGBClassifier\n",
        "from lightgbm import LGBMClassifier\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "\n",
        "# Load your data and split into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=123)\n",
        "\n",
        "# Define the models you want to compare\n",
        "models = [\n",
        "    ('Logistic Regression', LogisticRegression(max_iter=1000, random_state=123)),\n",
        "    ('Decision Tree', DecisionTreeClassifier(random_state=123)),\n",
        "    ('Random Forest', RandomForestClassifier(random_state=123)),\n",
        "    ('XGBoost', XGBClassifier(random_state=123)),\n",
        "    ('LightGBM', LGBMClassifier(random_state=123)),\n",
        "    ('SVM', SVC(random_state=123)),\n",
        "    ('KNN', KNeighborsClassifier())\n",
        "]\n",
        "\n",
        "# Train and evaluate each model\n",
        "for name, model in models:\n",
        "    # Fit the model to the training data\n",
        "    model.fit(X_train, y_train)\n",
        "\n",
        "    # Make predictions on the testing data\n",
        "    y_pred = model.predict(X_test)\n",
        "\n",
        "    # Evaluate the model's performance using common metrics\n",
        "    accuracy = accuracy_score(y_test, y_pred)\n",
        "    precision = precision_score(y_test, y_pred)\n",
        "    recall = recall_score(y_test, y_pred)\n",
        "    f1 = f1_score(y_test, y_pred)\n",
        "\n",
        "    # Print the model's performance metrics\n",
        "    print(f\"{name} Results:\")\n",
        "    print(f\"Accuracy: {accuracy:.3f}\")\n",
        "    print(f\"Precision: {precision:.3f}\")\n",
        "    print(f\"Recall: {recall:.3f}\")\n",
        "    print(f\"F1 Score: {f1:.3f}\")\n",
        "    print()"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "* Random Forest and LightGBM had the highest accuracy of all classification algorithms, but Random Forests had a higher precision.\n",
        "* Since our dataset is positively skewed and has lots of outliers and large features, Random Forest is the good algorithm to handle them."
      ],
      "metadata": {
        "id": "ZzUpePJOVqNE"
      },
      "id": "ZzUpePJOVqNE"
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Model Implementation"
      ],
      "metadata": {
        "id": "5dH4Rvh7y0p6"
      },
      "id": "5dH4Rvh7y0p6"
    },
    {
      "cell_type": "markdown",
      "id": "cd1aa168",
      "metadata": {
        "id": "cd1aa168"
      },
      "source": [
        "## Base Model (Random Forest)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "39907085",
      "metadata": {
        "id": "39907085",
        "outputId": "5a38fd99-3432-4192-b10e-60d0259699e5"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "The baseline model Results:\n",
            "Accuracy: 0.763\n",
            "Precision: 0.716\n",
            "Recall: 0.615\n",
            "F1 Score: 0.662\n"
          ]
        }
      ],
      "source": [
        "\n",
        "\n",
        "# Split into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=123)\n",
        "\n",
        "# Define the Random Forest model\n",
        "rf_base= RandomForestClassifier(n_estimators=100, random_state=123)\n",
        "\n",
        "# Fit the model to the training data\n",
        "rf_base.fit(X_train, y_train)\n",
        "\n",
        "# Make predictions on the testing data\n",
        "y_pred = rf_base.predict(X_test)\n",
        "\n",
        "# Evaluate the model's performance using common metrics\n",
        "accuracy = accuracy_score(y_test, y_pred)\n",
        "precision = precision_score(y_test, y_pred)\n",
        "recall = recall_score(y_test, y_pred)\n",
        "f1 = f1_score(y_test, y_pred)\n",
        "\n",
        "# Print the model's performance metrics\n",
        "print(f\"The baseline model Results:\")\n",
        "print(f\"Accuracy: {accuracy:.3f}\")\n",
        "print(f\"Precision: {precision:.3f}\")\n",
        "print(f\"Recall: {recall:.3f}\")\n",
        "print(f\"F1 Score: {f1:.3f}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Model Improvement"
      ],
      "metadata": {
        "id": "zlrXg7EPykNV"
      },
      "id": "zlrXg7EPykNV"
    },
    {
      "cell_type": "markdown",
      "id": "6817740d",
      "metadata": {
        "id": "6817740d"
      },
      "source": [
        "## Feature Importance"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "b5989000",
      "metadata": {
        "id": "b5989000",
        "outputId": "e8d212c0-562f-4113-b4cd-30428cda75b4"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 720x432 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Obtain feature importances\n",
        "importances = rf_base.feature_importances_\n",
        "\n",
        "# Get the feature names\n",
        "feature_names = X.columns\n",
        "\n",
        "# Sort feature importances in descending order\n",
        "indices = np.argsort(importances)[::-1]\n",
        "\n",
        "# Plot feature importances\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.bar(range(len(importances)), importances[indices])\n",
        "plt.xticks(range(len(importances)), feature_names[indices], rotation=90)\n",
        "plt.xlabel(\"Features\")\n",
        "plt.ylabel(\"Importance\")\n",
        "plt.title(\"Feature Importances (Random Forest)\")\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "89d7e009",
      "metadata": {
        "id": "89d7e009",
        "outputId": "2d983a64-b891-4a8c-aba7-d1fa2d2501cb"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Accuracy without EastofUS: 0.761\n",
            "Accuracy without Urban: 0.692\n",
            "Accuracy without LowIncomeTracts: 0.763\n",
            "Accuracy without log10_PCTGQTRS: 0.759\n",
            "Accuracy without log10_PovertyRate: 0.762\n",
            "Accuracy without log10_MedianFamilyIncome: 0.761\n",
            "Accuracy without log10_TractKids: 0.756\n",
            "Accuracy without log10_TractSeniors: 0.754\n",
            "Accuracy without log10_TractWhite: 0.760\n",
            "Accuracy without log10_TractBlack: 0.761\n",
            "Accuracy without log10_TractAsian: 0.757\n",
            "Accuracy without log10_TractNHOPI: 0.761\n",
            "Accuracy without log10_TractAIAN: 0.762\n",
            "Accuracy without log10_TractOMultir: 0.761\n",
            "Accuracy without log10_TractHispanic: 0.757\n",
            "Accuracy without log10_TractHUNV: 0.754\n",
            "Accuracy without log10_TractSNAP: 0.760\n"
          ]
        }
      ],
      "source": [
        "from sklearn.metrics import accuracy_score\n",
        "\n",
        "# Initialize an empty list to store accuracies\n",
        "accuracies_rf = []\n",
        "\n",
        "# Iterate over each feature\n",
        "for i in range(X.shape[1]):\n",
        "    # Create a new dataset without the i-th feature\n",
        "    X_removed = X.drop(X.columns[i], axis=1)\n",
        "\n",
        "    # Split the new dataset into training and testing sets\n",
        "    X_train, X_test, y_train, y_test = train_test_split(X_removed, y, test_size=0.2, random_state=123)\n",
        "\n",
        "    # Create a new Random Forest model\n",
        "    rf_model = RandomForestClassifier(n_estimators=100, random_state=123)\n",
        "\n",
        "    # Fit the model to the training data\n",
        "    rf_model.fit(X_train, y_train)\n",
        "\n",
        "    # Make predictions on the testing data\n",
        "    y_pred = rf_model.predict(X_test)\n",
        "\n",
        "    # Calculate the accuracy and store it\n",
        "    accuracy = accuracy_score(y_test, y_pred)\n",
        "    accuracies_rf.append(accuracy)\n",
        "\n",
        "# Print the accuracies for each feature removal\n",
        "for i, feature in enumerate(X.columns):\n",
        "    print(f\"Accuracy without {feature}: {accuracies_rf[i]:.3f}\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "a4030e7b",
      "metadata": {
        "id": "a4030e7b",
        "outputId": "8885f825-0b16-4895-dee0-284cb5064b3e"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Random Forest Accuracy: 0.7577509928237999\n",
            "LightGBM Accuracy: 0.663624329408486\n"
          ]
        }
      ],
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from lightgbm import LGBMClassifier\n",
        "from sklearn.metrics import accuracy_score\n",
        "\n",
        "# Select features for Random Forest\n",
        "rf_selected_features = ['log10_TractKids','log10_TractHUNV','log10_TractWhite','log10_TractSeniors','log10_TractAsian'\n",
        "                       ,'log10_TractHispanic','Urban','log10_TractBlack','log10_TractSNAP']\n",
        "\n",
        "# Select features for LightGBM\n",
        "lgbm_selected_features = ['log10_TractHUNV','log10_TractWhite','log10_TractSeniors'\n",
        "                       ,'log10_TractSNAP','log10_TractHispanic','log10_TractOMultir','log10_TractAIAN','log10_TractNHOPI',\n",
        "                         'log10_TractAsian','log10_TractBlack','log10_TractKids','log10_MedianFamilyIncome','log10_PovertyRate'\n",
        "                         ,'log10_PCTGQTRS','Urban','EastofUS']\n",
        "\n",
        "# Split the data into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=123)\n",
        "\n",
        "# Random Forest\n",
        "rf_selected_model = RandomForestClassifier()\n",
        "rf_selected_model.fit(X_train[rf_selected_features], y_train)\n",
        "rf_predictions = rf_selected_model.predict(X_test[rf_selected_features])\n",
        "rf_accuracy = accuracy_score(y_test, rf_predictions)\n",
        "\n",
        "# LightGBM\n",
        "lgbm_selected_model = LGBMClassifier()\n",
        "lgbm_selected_model.fit(X_train[lgbm_selected_features], y_train)\n",
        "lgbm_predictions = lgbm_selected_model.predict(X_test[lgbm_selected_features])\n",
        "lgbm_accuracy = accuracy_score(y_test, lgbm_predictions)\n",
        "\n",
        "# Print the results\n",
        "print(\"Random Forest Accuracy:\", rf_accuracy)\n",
        "print(\"LightGBM Accuracy:\", lgbm_accuracy)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "e6e739eb",
      "metadata": {
        "id": "e6e739eb",
        "outputId": "f4d1d206-114f-49b7-8361-fb2662f86d27"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Optimal number of features:  17\n",
            "Selected features:  Index(['EastofUS', 'Urban', 'LowIncomeTracts', 'log10_PCTGQTRS',\n",
            "       'log10_PovertyRate', 'log10_MedianFamilyIncome', 'log10_TractKids',\n",
            "       'log10_TractSeniors', 'log10_TractWhite', 'log10_TractBlack',\n",
            "       'log10_TractAsian', 'log10_TractNHOPI', 'log10_TractAIAN',\n",
            "       'log10_TractOMultir', 'log10_TractHispanic', 'log10_TractHUNV',\n",
            "       'log10_TractSNAP'],\n",
            "      dtype='object')\n"
          ]
        }
      ],
      "source": [
        "from sklearn.feature_selection import RFECV\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "\n",
        "# Create a Random Forest classifier\n",
        "rf_model = RandomForestClassifier(n_estimators=100, random_state=123)\n",
        "\n",
        "# Create RFECV object with Random Forest classifier\n",
        "rfecv = RFECV(estimator=rf_model, cv=5, scoring='accuracy')\n",
        "\n",
        "# Fit RFECV on the training data\n",
        "rfecv.fit(X_train, y_train)\n",
        "\n",
        "# Print the optimal number of features\n",
        "print(\"Optimal number of features: \", rfecv.n_features_)\n",
        "\n",
        "# Get the selected features\n",
        "selected_features_rf = X_train.columns[rfecv.support_]\n",
        "print(\"Selected features: \", selected_features_rf)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "4a504da2",
      "metadata": {
        "id": "4a504da2"
      },
      "source": [
        "* Model 1 has optimal number of features is 17 (all features).\n",
        "* The feature importance of each feature is very small and feature selection may not have a significant impact on improving the model's performance."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "3d9ae29b",
      "metadata": {
        "id": "3d9ae29b"
      },
      "source": [
        "## Hyperparameter Tuning"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "a0aba5a2",
      "metadata": {
        "id": "a0aba5a2"
      },
      "source": [
        "### Full model"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "da701b3e",
      "metadata": {
        "id": "da701b3e",
        "outputId": "2d4d3637-b398-47b5-fcb4-87822b5adb46"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Best Model Accuracy: 0.7641608026196614\n"
          ]
        }
      ],
      "source": [
        "from sklearn.model_selection import GridSearchCV\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "\n",
        "# Create a Random Forest classifier\n",
        "rf_model = RandomForestClassifier(random_state=123)\n",
        "\n",
        "# Define the parameter grid for hyperparameter tuning\n",
        "param_grid = {\n",
        "    'n_estimators': [100, 200, 300],\n",
        "    'max_depth': [None, 5, 10],\n",
        "    'min_samples_split': [2, 5, 10]\n",
        "}\n",
        "\n",
        "# Create the GridSearchCV object\n",
        "grid_search = GridSearchCV(estimator=rf_model, param_grid=param_grid, cv=5, scoring='accuracy')\n",
        "\n",
        "# Fit the GridSearchCV object on the training data\n",
        "grid_search.fit(X_train, y_train)\n",
        "\n",
        "# Get the best hyperparameters and model\n",
        "best_params = grid_search.best_params_\n",
        "best_model = grid_search.best_estimator_\n",
        "\n",
        "# Fit the best model on the training data\n",
        "best_model.fit(X_train[rf_selected_features], y_train)\n",
        "\n",
        "\n",
        "# Use the best model to make predictions\n",
        "y_pred = best_model.predict(X_test)\n",
        "\n",
        "# Evaluate the performance of the best model\n",
        "accuracy = accuracy_score(y_test, y_pred)\n",
        "print(\"Best Model Accuracy:\", accuracy)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "9c7cc54c",
      "metadata": {
        "id": "9c7cc54c",
        "outputId": "fb95d5ec-9eca-4ca7-c68d-3e5176d36972"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Requirement already satisfied: joblib in c:\\users\\clara\\anaconda3\\lib\\site-packages (1.1.0)\n",
            "Note: you may need to restart the kernel to use updated packages.\n"
          ]
        }
      ],
      "source": [
        "#pip install joblib\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "395e812a",
      "metadata": {
        "id": "395e812a",
        "outputId": "413aa397-be22-46bb-f272-e9f490cc35a2"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "['random_forest_model.pkl']"
            ]
          },
          "execution_count": 38,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "from sklearn.ensemble import RandomForestClassifier\n",
        "import joblib\n",
        "\n",
        "\n",
        "\n",
        "# Fit the best model on the training data\n",
        "best_model.fit(X_train[rf_selected_features], y_train)\n",
        "\n",
        "# Save the best model to a file\n",
        "joblib.dump(best_model, 'random_forest_model.pkl')\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "11e52f92",
      "metadata": {
        "id": "11e52f92"
      },
      "source": [
        "### Reduced Model"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "0645b1ca",
      "metadata": {
        "id": "0645b1ca",
        "outputId": "e331dcaf-9922-4521-d5f6-df619a001cb8"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "['random_forest_tuned_model.pkl']"
            ]
          },
          "execution_count": 24,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.model_selection import GridSearchCV\n",
        "import joblib\n",
        "\n",
        "# Select features for Random Forest\n",
        "rf_selected_features = ['log10_TractKids', 'log10_TractHUNV', 'log10_TractWhite', 'log10_TractSeniors', 'log10_TractAsian', 'log10_TractHispanic', 'Urban', 'log10_TractBlack', 'log10_TractSNAP']\n",
        "\n",
        "# Create the Random Forest model\n",
        "rf_model = RandomForestClassifier(random_state=123)\n",
        "\n",
        "# Define the hyperparameters to tune\n",
        "param_grid = {\n",
        "    'n_estimators': [100, 200, 300],\n",
        "    'max_depth': [5, 10, 15],\n",
        "    'min_samples_split': [2, 5, 10]\n",
        "}\n",
        "\n",
        "# Perform Grid Search Cross Validation\n",
        "grid_search = GridSearchCV(estimator=rf_model, param_grid=param_grid, cv=5)\n",
        "grid_search.fit(X_train[rf_selected_features], y_train)\n",
        "\n",
        "# Get the best tuned model\n",
        "best_model = grid_search.best_estimator_\n",
        "\n",
        "# Save the tuned model to a file\n",
        "joblib.dump(best_model, 'random_forest_tuned_model.pkl')\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "d5e9371e",
      "metadata": {
        "id": "d5e9371e",
        "outputId": "bae8e595-c344-4773-ffa9-e764bc1a7596"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Tuned Random Forest Accuracy: 0.7618616317146241\n"
          ]
        }
      ],
      "source": [
        "# Make predictions on the test set\n",
        "y_pred = best_model.predict(X_test[rf_selected_features])\n",
        "\n",
        "# Calculate the accuracy of the model\n",
        "accuracy = accuracy_score(y_test, y_pred)\n",
        "\n",
        "# Print the accuracy\n",
        "print(\"Tuned Random Forest Accuracy:\", accuracy)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "92b3f90e",
      "metadata": {
        "id": "92b3f90e"
      },
      "source": [
        "### Compare performance"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "4f139c91",
      "metadata": {
        "id": "4f139c91",
        "outputId": "7bbf0f89-5ce0-4696-cd9f-f1499c7e0fa2"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Random Forest Model:\n",
            "Accuracy: 0.762\n",
            "Precision: 0.719\n",
            "Recall: 0.604\n",
            "Runtime: 1.052 seconds\n",
            "\n",
            "Tuned Random Forest Model:\n",
            "Accuracy: 0.762\n",
            "Precision: 0.714\n",
            "Recall: 0.612\n",
            "Runtime: 1.203 seconds\n"
          ]
        }
      ],
      "source": [
        "import time\n",
        "from sklearn.metrics import accuracy_score, precision_score, recall_score\n",
        "import joblib\n",
        "\n",
        "# Load the saved models\n",
        "random_forest_model = joblib.load('random_forest_model.pkl')\n",
        "random_forest_tuned_model = joblib.load('random_forest_tuned_model.pkl')\n",
        "\n",
        "# Fit the models on the training data\n",
        "random_forest_model.fit(X_train, y_train)\n",
        "random_forest_tuned_model.fit(X_train[rf_selected_features], y_train)\n",
        "\n",
        "# Evaluate the performance of the random_forest_model\n",
        "start_time = time.time()\n",
        "y_pred_rf = random_forest_model.predict(X_test)\n",
        "end_time = time.time()\n",
        "\n",
        "accuracy_rf = accuracy_score(y_test, y_pred_rf)\n",
        "precision_rf = precision_score(y_test, y_pred_rf)\n",
        "recall_rf = recall_score(y_test, y_pred_rf)\n",
        "runtime_rf = end_time - start_time\n",
        "\n",
        "# Evaluate the performance of the random_forest_tuned_model\n",
        "start_time = time.time()\n",
        "y_pred_best = random_forest_tuned_model.predict(X_test[rf_selected_features])\n",
        "end_time = time.time()\n",
        "\n",
        "accuracy_best = accuracy_score(y_test, y_pred_best)\n",
        "precision_best = precision_score(y_test, y_pred_best)\n",
        "recall_best = recall_score(y_test, y_pred_best)\n",
        "runtime_best = end_time - start_time\n",
        "\n",
        "# Print the performance metrics\n",
        "print(\"Random Forest Model:\")\n",
        "print(f\"Accuracy: {accuracy_rf:.3f}\")\n",
        "print(f\"Precision: {precision_rf:.3f}\")\n",
        "print(f\"Recall: {recall_rf:.3f}\")\n",
        "print(f\"Runtime: {runtime_rf:.3f} seconds\")\n",
        "\n",
        "print(\"\\nTuned Random Forest Model:\")\n",
        "print(f\"Accuracy: {accuracy_best:.3f}\")\n",
        "print(f\"Precision: {precision_best:.3f}\")\n",
        "print(f\"Recall: {recall_best:.3f}\")\n",
        "print(f\"Runtime: {runtime_best:.3f} seconds\")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "c59ed001",
      "metadata": {
        "id": "c59ed001"
      },
      "source": [
        "# Model Validation"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "11e5fbcb",
      "metadata": {
        "id": "11e5fbcb",
        "outputId": "d2cd1999-7c73-4cf6-8ce4-fd8882959d4d"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Cross-Validation Scores: [0.75535621 0.75962376 0.74838878 0.75742531 0.74967337]\n",
            "Mean Accuracy: 0.7540934871744431\n",
            "Standard Deviation: 0.004367161281963517\n"
          ]
        }
      ],
      "source": [
        "from sklearn.model_selection import cross_val_score\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "\n",
        "# Create the random forest model with tuned hyperparameters\n",
        "random_forest_tuned_model = RandomForestClassifier(n_estimators=100, max_depth=10, random_state=123)\n",
        "\n",
        "# Perform k-Fold Cross-Validation\n",
        "k = 5  # Number of folds\n",
        "scoring = 'accuracy'  # Scoring metric\n",
        "\n",
        "# Use cross_val_score to perform k-fold cross-validation\n",
        "scores = cross_val_score(random_forest_tuned_model, X_train, y_train, cv=k, scoring=scoring)\n",
        "\n",
        "# Print the cross-validation scores\n",
        "print(\"Cross-Validation Scores:\", scores)\n",
        "print(\"Mean Accuracy:\", scores.mean())\n",
        "print(\"Standard Deviation:\", scores.std())\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "2bbe9a65",
      "metadata": {
        "id": "2bbe9a65"
      },
      "source": [
        "* Overall, the cross-validation results suggest that the random_forest_tuned_model has an average accuracy of approximately 0.75 with relatively low variability across the folds.\n",
        "* It indicates that the model is performing consistently and reliably across different subsets of the training data."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "fbbbba02",
      "metadata": {
        "id": "fbbbba02",
        "outputId": "90cc0152-0071-4ece-d589-22171ea42b06"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Accuracy: 0.7618616317146241\n"
          ]
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.metrics import accuracy_score, confusion_matrix\n",
        "\n",
        "# Calculate the accuracy of the model\n",
        "accuracy = accuracy_score(y_test, y_pred)\n",
        "print(\"Accuracy:\", accuracy)\n",
        "\n",
        "# Confusion Matrix\n",
        "cm = confusion_matrix(y_test, y_pred)\n",
        "\n",
        "plt.imshow(cm, cmap=plt.cm.Blues)\n",
        "plt.title('Confusion Matrix')\n",
        "plt.colorbar()\n",
        "\n",
        "classes = ['Class 0', 'Class 1']  # Replace with your class labels\n",
        "tick_marks = np.arange(len(classes))\n",
        "\n",
        "plt.xticks(tick_marks, classes)\n",
        "plt.yticks(tick_marks, classes)\n",
        "\n",
        "thresh = cm.max() / 2\n",
        "\n",
        "# Display the numbers inside the confusion matrix plot\n",
        "for i in range(cm.shape[0]):\n",
        "    for j in range(cm.shape[1]):\n",
        "        plt.text(j, i, format(cm[i, j], 'd'), ha=\"center\", va=\"center\",\n",
        "                 color=\"white\" if cm[i, j] > thresh else \"black\")\n",
        "\n",
        "plt.xlabel('Predicted Class')\n",
        "plt.ylabel('True Class')\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "* **Class 0**: Out of a total of 9,957 instances that actually belong to class 0, the model correctly predicted 7,630 instances (True Negatives), while incorrectly predicting 1,327 instances as class 1 (False Positives).\n",
        "* **Class 1**: Out of a total of 5,396 instances that actually belong to class 1, the model correctly predicted 3,305 instances (True Positives), while incorrectly predicting 2,091 instances as class 0 (False Negatives)."
      ],
      "metadata": {
        "id": "WVyV5L191N3L"
      },
      "id": "WVyV5L191N3L"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "e34f30a8",
      "metadata": {
        "id": "e34f30a8",
        "outputId": "ad9b7339-36a2-4aba-eccc-14d18cb19ca9"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        },
        {
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "from sklearn.metrics import plot_roc_curve, precision_recall_curve, plot_precision_recall_curve\n",
        "from sklearn.inspection import plot_partial_dependence\n",
        "from sklearn.model_selection import learning_curve, cross_val_predict, cross_val_score, KFold, train_test_split\n",
        "\n",
        "# ROC Curve\n",
        "plot_roc_curve(best_model, X_test[rf_selected_features], y_test)\n",
        "plt.title('Receiver Operating Characteristic (ROC) Curve')\n",
        "plt.show()\n",
        "\n",
        "# Precision-Recall Curve\n",
        "plot_precision_recall_curve(best_model, X_test[rf_selected_features], y_test)\n",
        "plt.title('Precision-Recall Curve')\n",
        "plt.show()\n",
        "\n",
        "# Feature Importance\n",
        "feature_importance = best_model.feature_importances_\n",
        "sorted_indices = np.argsort(feature_importance)\n",
        "sorted_features = np.array(rf_selected_features)[sorted_indices]\n",
        "sorted_importance = feature_importance[sorted_indices]\n",
        "\n",
        "plt.barh(range(len(sorted_importance)), sorted_importance, align='center')\n",
        "plt.yticks(range(len(sorted_importance)), sorted_features)\n",
        "plt.xlabel('Feature Importance')\n",
        "plt.ylabel('Features')\n",
        "plt.title('Feature Importance')\n",
        "plt.show()\n",
        "\n",
        "# Learning Curve\n",
        "train_sizes, train_scores, test_scores = learning_curve(best_model, X_train[rf_selected_features], y_train, cv=5, scoring='accuracy')\n",
        "mean_train_scores = np.mean(train_scores, axis=1)\n",
        "mean_test_scores = np.mean(test_scores, axis=1)\n",
        "\n",
        "plt.plot(train_sizes, mean_train_scores, 'o-', label='Training Accuracy')\n",
        "plt.plot(train_sizes, mean_test_scores, 'o-', label='Validation Accuracy')\n",
        "plt.xlabel('Training Set Size')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.title('Learning Curve')\n",
        "plt.legend()\n",
        "plt.show()\n",
        "\n",
        "# Residual Plot\n",
        "kfold = KFold(n_splits=5, shuffle=True, random_state=123)\n",
        "y_pred_cv = cross_val_predict(best_model, X_train[rf_selected_features], y_train, cv=kfold)\n",
        "\n",
        "residuals = y_train - y_pred_cv\n",
        "plt.scatter(y_pred_cv, residuals)\n",
        "plt.xlabel('Predicted Values')\n",
        "plt.ylabel('Residuals')\n",
        "plt.title('Residual Plot')\n",
        "plt.axhline(y=0, color='r', linestyle='-')\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "* In the ROC curve, an  AUC of 0.83 suggests that the model has a high ability to discriminate between 1(food desert) and 0 ( not food desert) classes.\n",
        "* The model demonstrates good predictive power and performs better than a random classifier (AUC of 0.5)\n",
        "* In the Precision-Recall curve, having an AP of 0.75 indicates that model achives reasonably good precision and recall trade-off across different recall levels.\n",
        "* The feature importance shows that 'log10_TractWhite', 'Urban' , 'log10_TractHispanic','log10_TractKids','log10_TractSeniors',\n",
        "'log10_TractAsian',\n",
        "'log10_TractHUNV',\n",
        "'log10_TractBlack',\n",
        "'log10_TractSNAP' are the key drivers that influence the target variable in order.\n",
        "* It has a bit higher training accuracy than the validation accuracy. But as observed in the result of cross validation, this model does not appeared to be overfitting. It has 0.004 of standard deviation , which means the model is generalized well to unseen data.\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "qGjWftX2NJFQ"
      },
      "id": "qGjWftX2NJFQ"
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "7j7GdyVHSt7Q"
      },
      "id": "7j7GdyVHSt7Q",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.9.7"
    },
    "colab": {
      "provenance": [],
      "include_colab_link": true
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}